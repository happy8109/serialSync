---
description: 
globs: 
alwaysApply: true
---
# SerialSync 项目开发规则

## 技术栈规范

### 1. 核心技术栈
```javascript
// 必须使用的技术栈
- Node.js (v16+)
- HTML5, CSS3, JavaScript (ES6+)
- serialport (串口通信)
- config (配置管理)
- winston (日志系统)
```

### 2. 开发工具规范
```javascript
// 推荐的开发工具
- ESLint (代码规范检查)
- Prettier (代码格式化)
```

## 架构设计规范

### 1. 模块化设计
```javascript
// 项目结构
src/
├── core/           # 核心功能模块
│   └── serial/     # 串口通信
├── ui/             # 用户界面
│   ├── components/ # UI组件
│   ├── pages/      # 页面
│   └── styles/     # 样式文件
├── utils/          # 工具函数
├── config/         # 配置文件
└── logs/           # 日志文件
```

## 功能实现规范

### 1. 串口通信规范
```javascript
// 串口通信实现要求
- 支持自动重连机制
- 实现数据校验和重传
- 支持数据压缩
- 提供连接状态监控
- 实现错误处理和日志记录
- 支持大文件分块传输
```

## 配置管理规范

### 1. 配置文件结构
```json
{
  "serial": {
    "port": "COM3",
    "baudRate": 115200,
    "dataBits": 8,
    "stopBits": 1,
    "parity": "none",
    "timeout": 5000
  },
  "logging": {
    "level": "info",
    "file": "./logs/sync.log",
    "maxSize": "10m"
  }
}
```

## 性能规范

### 1. 性能要求
```javascript
// 性能指标
- 串口传输速度 > 10KB/s
- 文件同步响应时间 < 5秒
- 内存使用 < 100MB
- CPU使用率 < 30%
- 启动时间 < 10秒
```

### 2. 优化规范
```javascript
// 优化要求
- 使用流式处理大文件
- 实现数据缓存机制
- 优化串口通信协议
- 减少不必要的文件I/O
- 实现异步处理机制
```

## 安全规范

### 1. 数据安全
```javascript
// 安全要求
- 实现文件完整性校验
- 记录安全审计日志
```

### 2. 错误处理
```javascript
// 错误处理要求
- 优雅处理所有异常
- 提供详细的错误信息
- 实现自动恢复机制
- 记录错误日志
- 通知用户错误状态

```